#!/usr/bin/env node

/*
 * This cli places a file in your home directory named `~/.fido-<name>`, where `<name>` is the value you give to the `name` option.
 *
 * This file is crucial for maintaining state of the CLI between start and stops. 
 * Understanding the file:
 * File with a value means the program has started and the last reading was out of bounds.
 * Empty file means the program has started and the last reading was in bounds.
 * File with a value means the program has started and the last reading was out of bounds.
 */
var log = console.log

var fs = require('fs')
var program = require('commander')
var exec = require('child_process').exec;
var push = require('./lib/SendEmail.js')
var home = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE
var isJson = require('is-json')

program
  .version('0.0.1')
  .option('--name <name>', 'A unique name for this Fido')
  .option('--minimum <repository>')
  .option('--maximum <destination>')
  .option('--emailTo <address>', 'A JSON object to feed into the templates. You must provide all variables.')
  .option('--emailUserName <user name>')
  .option('--emailPassword <password>')
  .option('--sensorId <sensor id>')
  .option('--verbose')
  .parse(process.argv);

var pushOptions = {
  userName: program.emailUserName,
  password: program.emailPassword,
  to: program.emailTo,
  subject: '',
  message: ''
}

// convert string to int

program.minimum = parseFloat(program.minimum)
program.maximum = parseFloat(program.maximum)

if(program.verbose) log('minimum: ' + program.minimum)
if(program.verbose) log('maximum: ' + program.maximum)

var receivedValue = ''
process.stdin.on('error', function(e) {
  console.log("error: "+e)
})

process.stdin.on('data', function(chunk) {
  if (chunk)
    receivedValue += chunk
})
process.stdin.on('end', function() {
  if(program.verbose) log('receivedValue: ' + receivedValue)
  sniff()
})

/* 
 * Sniff STDIN to see if it is in or out of bounds, then check the process file to see what to do.
 */
function sniff() {

  // If our receivedValue is JSON, get our actual sensor value and assign it to recievedValue.
  if (isJson(receivedValue) === true) {
    var packet = JSON.parse(receivedValue)
    if (program.hasOwnProperty('sensorId')) {
      receivedValue = packet[program.sensorId] 
    }
    else {
      // If we haven't been told a sensor_id, then use the first value in the array.
      receivedValue = packet[(_.keys(packet))[0]]
    }
  }

  // Make sure recievedValue is a float
  receivedValue = parseFloat(receivedValue)
  if (receivedValue === NaN) console.error('Error: Received value is not a number')

  fs.readFile(home + '/.fido-' + program.name, {encoding: 'utf8'}, function(err, value) {
    // No file means the program has not yet started.
    if (err) {
      salute()
      createProcessFile()
    }
    // Empty file means the program has started and the last reading was in bounds.
    else if (value == '') { 
      if (receivedValue > program.maximum) {
        bark(program.name + ' has detected a value of ' + receivedValue + ' which is more than your maximum of ' + program.maximum)
      }
      else if (receivedValue < program.minimum) {
        bark(program.name + ' has detected a value of ' + receivedValue + ' which is less than your minimum of ' + program.minimum)
      }
    }
    // File with a value means the program has started and the last reading was out of bounds.
    else {
      // Do nothing unless the receivedValue is back in bounds, in which case blank the file
      if (receivedValue < program.maximum && receivedValue > program.minimum) {
        fs.writeFile(home + '/.fido-' + program.name, '')
      }
    }
  })
}

/*
 * Warn that receivedValue has gone out of bounds.
 */
function bark(message) {
  if (program.verbose)  log('Triggered...')
  pushOptions.message = message
  fs.open(home + '/.fido-' + program.name, 'w', function(err, fd) {
    var buffer = new Buffer(receivedValue.toString())
    fs.write(fd, buffer, 0, buffer.length, null, function(err) {
      push(pushOptions, function(err) {
        if (err) log(err)
      })
    })
  })
}

/*
 * Announce the program is now on.
 */
function salute() {
  pushOptions.subject = 'Hello from ' + program.name 
  push(pushOptions, function(err) {
    if (err) log(err)
  })
}

function createProcessFile() {
  fs.open(home + '/.fido-' + program.name, 'w', function(err, fd) {
    var buffer = new Buffer('')
    fs.write(fd, buffer, 0, buffer.length, null, function(err) {
      if (err) log(err)
    })
  })
}

